#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'build_cnt'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v19.07.4
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_POST_SH: diy-post.sh
  SSH_ACTIONS: true
  SSH_BEFORE_BUILD: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ ! -e $FEEDS_CONF ] || mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions before build
      uses: P3TERX/debugger-action@main
      if: ( env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh') ) && env.SSH_BEFORE_BUILD == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile OpenWrt
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        chmod +x $GITHUB_WORKSPACE/$DIY_POST_SH
        $GITHUB_WORKSPACE/$DIY_POST_SH
        echo "::set-output name=status::success"
        echo "::set-env name=SDK_NAME::$( basename bin/targets/*/*/openwrt-sdk-* )"
        echo "::set-env name=IMBUILDER_NAME::$( basename bin/targets/*/*/openwrt-imagebuilder-* )"
        echo "::set-env name=FIRMWARE_FILENAME::$( basename bin/targets/*/*/*-firmware.tar.xz )"
        echo "::set-env name=TARGET_DIR::$( readlink -f bin/targets/*/* )"

    - name: SSH connection to Actions when failed
      uses: P3TERX/debugger-action@main
      if: ( env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh') ) && steps.compile.outputs.status != 'success'

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload imagebuilder
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.IMBUILDER_NAME }}
        path: ${{ env.TARGET_DIR }}/openwrt-imagebuilder-*

    - name: Upload SDK
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.SDK_NAME }}
        path: ${{ env.TARGET_DIR }}/openwrt-sdk-*

    - name: Upload firmware
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.FIRMWARE_FILENAME }}
        path: ${{ env.TARGET_DIR }}/*-firmware.tar.xz

    - name: Print checksums
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        cat *sums
        sha256sums ../*.xz
